Terminals unused in grammar

    OPEN_BRACKETS
    CLOSE_BRACKETS
    LABEL
    TYPE
    ARRAY
    OF
    PROCEDURE
    FUNCTION
    GOTO
    IF
    THEN
    ELSE
    NOT
    OR
    AND
    WHILE
    DO
    INTDIV


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 program: $@1 PROGRAM IDENTIFIER OPEN_PARENTHESIS identifiers_list CLOSE_PARENTHESIS SEMICOLON block DOT

    3 $@2: %empty

    4 block: $@2 vars_declaration compound_command

    5 vars_declaration: VAR declare_vars
    6                 | %empty

    7 declare_vars: declare_vars declare_var
    8             | declare_var

    9 declare_var: var_list COLON type SEMICOLON

   10 type: IDENTIFIER

   11 var_list: var_list COMMA IDENTIFIER
   12         | IDENTIFIER

   13 identifiers_list: identifiers_list COMMA IDENTIFIER
   14                 | IDENTIFIER

   15 $@3: %empty

   16 compound_command: $@3 T_BEGIN commands T_END

   17 commands: commands command SEMICOLON
   18         | command SEMICOLON

   19 command: assignment

   20 $@4: %empty

   21 assignment: IDENTIFIER $@4 ASSIGNMENT expression

   22 expression: simple_expression
   23           | simple_expression relation

   24 relation: EQUAL simple_expression
   25         | NOT_EQUAL simple_expression
   26         | LESS simple_expression
   27         | LESS_EQUAL simple_expression
   28         | GREATER_EQUAL simple_expression
   29         | GREATER simple_expression

   30 simple_expression: simple_expression PLUS term
   31                  | simple_expression MINUS term
   32                  | term

   33 term: term MULTIPLY factor
   34     | term DIVIDE factor
   35     | factor

   36 factor: NUMBER
   37       | IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    PROGRAM (258) 2
    OPEN_PARENTHESIS (259) 2
    CLOSE_PARENTHESIS (260) 2
    OPEN_BRACKETS (261)
    CLOSE_BRACKETS (262)
    COMMA (263) 11 13
    SEMICOLON (264) 2 9 17 18
    COLON (265) 9
    DOT (266) 2
    T_BEGIN (267) 16
    T_END (268) 16
    VAR (269) 5
    IDENTIFIER (270) 2 10 11 12 13 14 21 37
    ASSIGNMENT (271) 21
    NUMBER (272) 36
    LABEL (273)
    TYPE (274)
    ARRAY (275)
    OF (276)
    PROCEDURE (277)
    FUNCTION (278)
    GOTO (279)
    IF (280)
    THEN (281)
    ELSE (282)
    NOT (283)
    OR (284)
    AND (285)
    WHILE (286)
    DO (287)
    INTDIV (288)
    PLUS (289) 30
    MINUS (290) 31
    MULTIPLY (291) 33
    DIVIDE (292) 34
    EQUAL (293) 24
    NOT_EQUAL (294) 25
    LESS (295) 26
    LESS_EQUAL (296) 27
    GREATER_EQUAL (297) 28
    GREATER (298) 29


Nonterminals, with rules where they appear

    $accept (44)
        on left: 0
    program (45)
        on left: 2
        on right: 0
    $@1 (46)
        on left: 1
        on right: 2
    block (47)
        on left: 4
        on right: 2
    $@2 (48)
        on left: 3
        on right: 4
    vars_declaration (49)
        on left: 5 6
        on right: 4
    declare_vars (50)
        on left: 7 8
        on right: 5 7
    declare_var (51)
        on left: 9
        on right: 7 8
    type (52)
        on left: 10
        on right: 9
    var_list (53)
        on left: 11 12
        on right: 9 11
    identifiers_list (54)
        on left: 13 14
        on right: 2 13
    compound_command (55)
        on left: 16
        on right: 4
    $@3 (56)
        on left: 15
        on right: 16
    commands (57)
        on left: 17 18
        on right: 16 17
    command (58)
        on left: 19
        on right: 17 18
    assignment (59)
        on left: 21
        on right: 19
    $@4 (60)
        on left: 20
        on right: 21
    expression (61)
        on left: 22 23
        on right: 21
    relation (62)
        on left: 24 25 26 27 28 29
        on right: 23
    simple_expression (63)
        on left: 30 31 32
        on right: 22 23 24 25 26 27 28 29 30 31
    term (64)
        on left: 33 34 35
        on right: 30 31 32 33 34
    factor (65)
        on left: 36 37
        on right: 33 34 35


State 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    2 program: $@1 . PROGRAM IDENTIFIER OPEN_PARENTHESIS identifiers_list CLOSE_PARENTHESIS SEMICOLON block DOT

    PROGRAM  shift, and go to state 4


State 3

    0 $accept: program $end .

    $default  accept


State 4

    2 program: $@1 PROGRAM . IDENTIFIER OPEN_PARENTHESIS identifiers_list CLOSE_PARENTHESIS SEMICOLON block DOT

    IDENTIFIER  shift, and go to state 5


State 5

    2 program: $@1 PROGRAM IDENTIFIER . OPEN_PARENTHESIS identifiers_list CLOSE_PARENTHESIS SEMICOLON block DOT

    OPEN_PARENTHESIS  shift, and go to state 6


State 6

    2 program: $@1 PROGRAM IDENTIFIER OPEN_PARENTHESIS . identifiers_list CLOSE_PARENTHESIS SEMICOLON block DOT

    IDENTIFIER  shift, and go to state 7

    identifiers_list  go to state 8


State 7

   14 identifiers_list: IDENTIFIER .

    $default  reduce using rule 14 (identifiers_list)


State 8

    2 program: $@1 PROGRAM IDENTIFIER OPEN_PARENTHESIS identifiers_list . CLOSE_PARENTHESIS SEMICOLON block DOT
   13 identifiers_list: identifiers_list . COMMA IDENTIFIER

    CLOSE_PARENTHESIS  shift, and go to state 9
    COMMA              shift, and go to state 10


State 9

    2 program: $@1 PROGRAM IDENTIFIER OPEN_PARENTHESIS identifiers_list CLOSE_PARENTHESIS . SEMICOLON block DOT

    SEMICOLON  shift, and go to state 11


State 10

   13 identifiers_list: identifiers_list COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 12


State 11

    2 program: $@1 PROGRAM IDENTIFIER OPEN_PARENTHESIS identifiers_list CLOSE_PARENTHESIS SEMICOLON . block DOT

    $default  reduce using rule 3 ($@2)

    block  go to state 13
    $@2    go to state 14


State 12

   13 identifiers_list: identifiers_list COMMA IDENTIFIER .

    $default  reduce using rule 13 (identifiers_list)


State 13

    2 program: $@1 PROGRAM IDENTIFIER OPEN_PARENTHESIS identifiers_list CLOSE_PARENTHESIS SEMICOLON block . DOT

    DOT  shift, and go to state 15


State 14

    4 block: $@2 . vars_declaration compound_command

    VAR  shift, and go to state 16

    $default  reduce using rule 6 (vars_declaration)

    vars_declaration  go to state 17


State 15

    2 program: $@1 PROGRAM IDENTIFIER OPEN_PARENTHESIS identifiers_list CLOSE_PARENTHESIS SEMICOLON block DOT .

    $default  reduce using rule 2 (program)


State 16

    5 vars_declaration: VAR . declare_vars

    IDENTIFIER  shift, and go to state 18

    declare_vars  go to state 19
    declare_var   go to state 20
    var_list      go to state 21


State 17

    4 block: $@2 vars_declaration . compound_command

    $default  reduce using rule 15 ($@3)

    compound_command  go to state 22
    $@3               go to state 23


State 18

   12 var_list: IDENTIFIER .

    $default  reduce using rule 12 (var_list)


State 19

    5 vars_declaration: VAR declare_vars .
    7 declare_vars: declare_vars . declare_var

    IDENTIFIER  shift, and go to state 18

    $default  reduce using rule 5 (vars_declaration)

    declare_var  go to state 24
    var_list     go to state 21


State 20

    8 declare_vars: declare_var .

    $default  reduce using rule 8 (declare_vars)


State 21

    9 declare_var: var_list . COLON type SEMICOLON
   11 var_list: var_list . COMMA IDENTIFIER

    COMMA  shift, and go to state 25
    COLON  shift, and go to state 26


State 22

    4 block: $@2 vars_declaration compound_command .

    $default  reduce using rule 4 (block)


State 23

   16 compound_command: $@3 . T_BEGIN commands T_END

    T_BEGIN  shift, and go to state 27


State 24

    7 declare_vars: declare_vars declare_var .

    $default  reduce using rule 7 (declare_vars)


State 25

   11 var_list: var_list COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 28


State 26

    9 declare_var: var_list COLON . type SEMICOLON

    IDENTIFIER  shift, and go to state 29

    type  go to state 30


State 27

   16 compound_command: $@3 T_BEGIN . commands T_END

    IDENTIFIER  shift, and go to state 31

    commands    go to state 32
    command     go to state 33
    assignment  go to state 34


State 28

   11 var_list: var_list COMMA IDENTIFIER .

    $default  reduce using rule 11 (var_list)


State 29

   10 type: IDENTIFIER .

    $default  reduce using rule 10 (type)


State 30

    9 declare_var: var_list COLON type . SEMICOLON

    SEMICOLON  shift, and go to state 35


State 31

   21 assignment: IDENTIFIER . $@4 ASSIGNMENT expression

    $default  reduce using rule 20 ($@4)

    $@4  go to state 36


State 32

   16 compound_command: $@3 T_BEGIN commands . T_END
   17 commands: commands . command SEMICOLON

    T_END       shift, and go to state 37
    IDENTIFIER  shift, and go to state 31

    command     go to state 38
    assignment  go to state 34


State 33

   18 commands: command . SEMICOLON

    SEMICOLON  shift, and go to state 39


State 34

   19 command: assignment .

    $default  reduce using rule 19 (command)


State 35

    9 declare_var: var_list COLON type SEMICOLON .

    $default  reduce using rule 9 (declare_var)


State 36

   21 assignment: IDENTIFIER $@4 . ASSIGNMENT expression

    ASSIGNMENT  shift, and go to state 40


State 37

   16 compound_command: $@3 T_BEGIN commands T_END .

    $default  reduce using rule 16 (compound_command)


State 38

   17 commands: commands command . SEMICOLON

    SEMICOLON  shift, and go to state 41


State 39

   18 commands: command SEMICOLON .

    $default  reduce using rule 18 (commands)


State 40

   21 assignment: IDENTIFIER $@4 ASSIGNMENT . expression

    IDENTIFIER  shift, and go to state 42
    NUMBER      shift, and go to state 43

    expression         go to state 44
    simple_expression  go to state 45
    term               go to state 46
    factor             go to state 47


State 41

   17 commands: commands command SEMICOLON .

    $default  reduce using rule 17 (commands)


State 42

   37 factor: IDENTIFIER .

    $default  reduce using rule 37 (factor)


State 43

   36 factor: NUMBER .

    $default  reduce using rule 36 (factor)


State 44

   21 assignment: IDENTIFIER $@4 ASSIGNMENT expression .

    $default  reduce using rule 21 (assignment)


State 45

   22 expression: simple_expression .
   23           | simple_expression . relation
   30 simple_expression: simple_expression . PLUS term
   31                  | simple_expression . MINUS term

    PLUS           shift, and go to state 48
    MINUS          shift, and go to state 49
    EQUAL          shift, and go to state 50
    NOT_EQUAL      shift, and go to state 51
    LESS           shift, and go to state 52
    LESS_EQUAL     shift, and go to state 53
    GREATER_EQUAL  shift, and go to state 54
    GREATER        shift, and go to state 55

    $default  reduce using rule 22 (expression)

    relation  go to state 56


State 46

   32 simple_expression: term .
   33 term: term . MULTIPLY factor
   34     | term . DIVIDE factor

    MULTIPLY  shift, and go to state 57
    DIVIDE    shift, and go to state 58

    $default  reduce using rule 32 (simple_expression)


State 47

   35 term: factor .

    $default  reduce using rule 35 (term)


State 48

   30 simple_expression: simple_expression PLUS . term

    IDENTIFIER  shift, and go to state 42
    NUMBER      shift, and go to state 43

    term    go to state 59
    factor  go to state 47


State 49

   31 simple_expression: simple_expression MINUS . term

    IDENTIFIER  shift, and go to state 42
    NUMBER      shift, and go to state 43

    term    go to state 60
    factor  go to state 47


State 50

   24 relation: EQUAL . simple_expression

    IDENTIFIER  shift, and go to state 42
    NUMBER      shift, and go to state 43

    simple_expression  go to state 61
    term               go to state 46
    factor             go to state 47


State 51

   25 relation: NOT_EQUAL . simple_expression

    IDENTIFIER  shift, and go to state 42
    NUMBER      shift, and go to state 43

    simple_expression  go to state 62
    term               go to state 46
    factor             go to state 47


State 52

   26 relation: LESS . simple_expression

    IDENTIFIER  shift, and go to state 42
    NUMBER      shift, and go to state 43

    simple_expression  go to state 63
    term               go to state 46
    factor             go to state 47


State 53

   27 relation: LESS_EQUAL . simple_expression

    IDENTIFIER  shift, and go to state 42
    NUMBER      shift, and go to state 43

    simple_expression  go to state 64
    term               go to state 46
    factor             go to state 47


State 54

   28 relation: GREATER_EQUAL . simple_expression

    IDENTIFIER  shift, and go to state 42
    NUMBER      shift, and go to state 43

    simple_expression  go to state 65
    term               go to state 46
    factor             go to state 47


State 55

   29 relation: GREATER . simple_expression

    IDENTIFIER  shift, and go to state 42
    NUMBER      shift, and go to state 43

    simple_expression  go to state 66
    term               go to state 46
    factor             go to state 47


State 56

   23 expression: simple_expression relation .

    $default  reduce using rule 23 (expression)


State 57

   33 term: term MULTIPLY . factor

    IDENTIFIER  shift, and go to state 42
    NUMBER      shift, and go to state 43

    factor  go to state 67


State 58

   34 term: term DIVIDE . factor

    IDENTIFIER  shift, and go to state 42
    NUMBER      shift, and go to state 43

    factor  go to state 68


State 59

   30 simple_expression: simple_expression PLUS term .
   33 term: term . MULTIPLY factor
   34     | term . DIVIDE factor

    MULTIPLY  shift, and go to state 57
    DIVIDE    shift, and go to state 58

    $default  reduce using rule 30 (simple_expression)


State 60

   31 simple_expression: simple_expression MINUS term .
   33 term: term . MULTIPLY factor
   34     | term . DIVIDE factor

    MULTIPLY  shift, and go to state 57
    DIVIDE    shift, and go to state 58

    $default  reduce using rule 31 (simple_expression)


State 61

   24 relation: EQUAL simple_expression .
   30 simple_expression: simple_expression . PLUS term
   31                  | simple_expression . MINUS term

    PLUS   shift, and go to state 48
    MINUS  shift, and go to state 49

    $default  reduce using rule 24 (relation)


State 62

   25 relation: NOT_EQUAL simple_expression .
   30 simple_expression: simple_expression . PLUS term
   31                  | simple_expression . MINUS term

    PLUS   shift, and go to state 48
    MINUS  shift, and go to state 49

    $default  reduce using rule 25 (relation)


State 63

   26 relation: LESS simple_expression .
   30 simple_expression: simple_expression . PLUS term
   31                  | simple_expression . MINUS term

    PLUS   shift, and go to state 48
    MINUS  shift, and go to state 49

    $default  reduce using rule 26 (relation)


State 64

   27 relation: LESS_EQUAL simple_expression .
   30 simple_expression: simple_expression . PLUS term
   31                  | simple_expression . MINUS term

    PLUS   shift, and go to state 48
    MINUS  shift, and go to state 49

    $default  reduce using rule 27 (relation)


State 65

   28 relation: GREATER_EQUAL simple_expression .
   30 simple_expression: simple_expression . PLUS term
   31                  | simple_expression . MINUS term

    PLUS   shift, and go to state 48
    MINUS  shift, and go to state 49

    $default  reduce using rule 28 (relation)


State 66

   29 relation: GREATER simple_expression .
   30 simple_expression: simple_expression . PLUS term
   31                  | simple_expression . MINUS term

    PLUS   shift, and go to state 48
    MINUS  shift, and go to state 49

    $default  reduce using rule 29 (relation)


State 67

   33 term: term MULTIPLY factor .

    $default  reduce using rule 33 (term)


State 68

   34 term: term DIVIDE factor .

    $default  reduce using rule 34 (term)
